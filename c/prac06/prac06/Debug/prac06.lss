
prac06.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000162  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001bb  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000011c  00000000  00000000  0000042b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000082d  00000000  00000000  00000547  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00000d74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000e815  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000400  00000000  00000000  0000f615  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  0000fa15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002eb5  00000000  00000000  0000facd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	24 c0       	rjmp	.+72     	; 0x4a <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>
  26:	19 c0       	rjmp	.+50     	; 0x5a <__bad_interrupt>
  28:	18 c0       	rjmp	.+48     	; 0x5a <__bad_interrupt>
  2a:	50 c0       	rjmp	.+160    	; 0xcc <encenderNum+0x6e>
  2c:	1f c0       	rjmp	.+62     	; 0x6c <encenderNum+0xe>
  2e:	21 c0       	rjmp	.+66     	; 0x72 <encenderNum+0x14>
  30:	23 c0       	rjmp	.+70     	; 0x78 <encenderNum+0x1a>
  32:	25 c0       	rjmp	.+74     	; 0x7e <encenderNum+0x20>
  34:	27 c0       	rjmp	.+78     	; 0x84 <encenderNum+0x26>
  36:	29 c0       	rjmp	.+82     	; 0x8a <encenderNum+0x2c>
  38:	2b c0       	rjmp	.+86     	; 0x90 <encenderNum+0x32>
  3a:	2d c0       	rjmp	.+90     	; 0x96 <encenderNum+0x38>
  3c:	2f c0       	rjmp	.+94     	; 0x9c <encenderNum+0x3e>
  3e:	31 c0       	rjmp	.+98     	; 0xa2 <encenderNum+0x44>
  40:	33 c0       	rjmp	.+102    	; 0xa8 <encenderNum+0x4a>
  42:	35 c0       	rjmp	.+106    	; 0xae <encenderNum+0x50>
  44:	37 c0       	rjmp	.+110    	; 0xb4 <encenderNum+0x56>
  46:	39 c0       	rjmp	.+114    	; 0xba <encenderNum+0x5c>
  48:	3b c0       	rjmp	.+118    	; 0xc0 <encenderNum+0x62>

0000004a <__ctors_end>:
  4a:	11 24       	eor	r1, r1
  4c:	1f be       	out	0x3f, r1	; 63
  4e:	cf e5       	ldi	r28, 0x5F	; 95
  50:	d2 e0       	ldi	r29, 0x02	; 2
  52:	de bf       	out	0x3e, r29	; 62
  54:	cd bf       	out	0x3d, r28	; 61
  56:	3d d0       	rcall	.+122    	; 0xd2 <main>
  58:	82 c0       	rjmp	.+260    	; 0x15e <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  5c:	08 95       	ret

0000005e <encenderNum>:
		}
	}
}

int encenderNum(int num){
	switch(num){
  5e:	80 31       	cpi	r24, 0x10	; 16
  60:	91 05       	cpc	r25, r1
  62:	88 f5       	brcc	.+98     	; 0xc6 <encenderNum+0x68>
  64:	fc 01       	movw	r30, r24
  66:	eb 5e       	subi	r30, 0xEB	; 235
  68:	ff 4f       	sbci	r31, 0xFF	; 255
  6a:	09 94       	ijmp
		case 0:{
			return 0xFD;
			break;
		}
		case 1:{
			return 0x60;
  6c:	80 e6       	ldi	r24, 0x60	; 96
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	08 95       	ret
			break;
		}
		case 2:{
			return 0xDB;
  72:	8b ed       	ldi	r24, 0xDB	; 219
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	08 95       	ret
			break;
		}
		case 3:{
			return 0xF2;
  78:	82 ef       	ldi	r24, 0xF2	; 242
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	08 95       	ret
			break;
		}
		case 4:{
			return 0x67;
  7e:	87 e6       	ldi	r24, 0x67	; 103
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	08 95       	ret
			break;
		}
		case 5:{
			return 0xB6;
  84:	86 eb       	ldi	r24, 0xB6	; 182
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	08 95       	ret
			break;
		}
		case 6:{
			return 0xBF;
  8a:	8f eb       	ldi	r24, 0xBF	; 191
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	08 95       	ret
			break;
		}
		case 7:{
			return 0xE0;
  90:	80 ee       	ldi	r24, 0xE0	; 224
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	08 95       	ret
			break;
		}
		case 8:{
			return 0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	08 95       	ret
			break;
		}
		case 9:{
			return 0xE6;
  9c:	86 ee       	ldi	r24, 0xE6	; 230
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	08 95       	ret
			break;
		}
		case 10:{
			return 0xEF;
  a2:	8f ee       	ldi	r24, 0xEF	; 239
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	08 95       	ret
			break;
		}
		case 11:{
			return 0x3E;
  a8:	8e e3       	ldi	r24, 0x3E	; 62
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	08 95       	ret
			break;
		}
		case 12:{
			return 0x9D;
  ae:	8d e9       	ldi	r24, 0x9D	; 157
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	08 95       	ret
			break;
		}
		case 13:{
			return 0x7A;
  b4:	8a e7       	ldi	r24, 0x7A	; 122
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	08 95       	ret
			break;
		}
		case 14:{
			return 0x9F;
  ba:	8f e9       	ldi	r24, 0x9F	; 159
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	08 95       	ret
			break;
		}
		case 15:{
			return 0xE2;
  c0:	82 ee       	ldi	r24, 0xE2	; 226
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	08 95       	ret
			break;
		}
		default:{
			return 0x00;
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	08 95       	ret
}

int encenderNum(int num){
	switch(num){
		case 0:{
			return 0xFD;
  cc:	8d ef       	ldi	r24, 0xFD	; 253
  ce:	90 e0       	ldi	r25, 0x00	; 0
		default:{
			return 0x00;
			break;
		}
	}
  d0:	08 95       	ret

000000d2 <main>:

int encenderNum(int num);
int delay1(void);

int main (void)
{
  d2:	af 92       	push	r10
  d4:	bf 92       	push	r11
  d6:	cf 92       	push	r12
  d8:	df 92       	push	r13
  da:	ef 92       	push	r14
  dc:	ff 92       	push	r15
  de:	0f 93       	push	r16
  e0:	1f 93       	push	r17
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
  e6:	ba df       	rcall	.-140    	; 0x5c <board_init>

	/* Insert application code here, after the board has been initialized. */
	
	DDRB = 0xFF;
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	87 bb       	out	0x17, r24	; 23
	for(int counter = 0; counter <= 15 ; counter++){
  ec:	00 e0       	ldi	r16, 0x00	; 0
  ee:	10 e0       	ldi	r17, 0x00	; 0
		for(int counter2 = 0x00; counter2 <= 0xFF ; counter2++){
			for (int counter3 = 0x00; counter3 <= 0xFF; counter3++)
			{
				for (int counter4 = 0x00; counter4 <=0x09; counter4++)
				{
					PORTB = encenderNum(counter);
  f0:	f1 2c       	mov	r15, r1
  f2:	bb 24       	eor	r11, r11
  f4:	b3 94       	inc	r11

int encenderNum(int num);
int delay1(void);

int main (void)
{
  f6:	af 2c       	mov	r10, r15
  f8:	cb 2c       	mov	r12, r11
  fa:	da e0       	ldi	r29, 0x0A	; 10
  fc:	c0 e0       	ldi	r28, 0x00	; 0
	board_init();

	/* Insert application code here, after the board has been initialized. */
	
	DDRB = 0xFF;
	for(int counter = 0; counter <= 15 ; counter++){
  fe:	d1 2c       	mov	r13, r1
 100:	e1 2c       	mov	r14, r1
 102:	1b c0       	rjmp	.+54     	; 0x13a <main+0x68>
		for(int counter2 = 0x00; counter2 <= 0xFF ; counter2++){
			for (int counter3 = 0x00; counter3 <= 0xFF; counter3++)
			{
				for (int counter4 = 0x00; counter4 <=0x09; counter4++)
				{
					PORTB = encenderNum(counter);
 104:	88 bb       	out	0x18, r24	; 24
 106:	21 50       	subi	r18, 0x01	; 1
 108:	31 09       	sbc	r19, r1
	DDRB = 0xFF;
	for(int counter = 0; counter <= 15 ; counter++){
		for(int counter2 = 0x00; counter2 <= 0xFF ; counter2++){
			for (int counter3 = 0x00; counter3 <= 0xFF; counter3++)
			{
				for (int counter4 = 0x00; counter4 <=0x09; counter4++)
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x32>
 10c:	41 50       	subi	r20, 0x01	; 1
 10e:	51 09       	sbc	r21, r1
	/* Insert application code here, after the board has been initialized. */
	
	DDRB = 0xFF;
	for(int counter = 0; counter <= 15 ; counter++){
		for(int counter2 = 0x00; counter2 <= 0xFF ; counter2++){
			for (int counter3 = 0x00; counter3 <= 0xFF; counter3++)
 110:	19 f0       	breq	.+6      	; 0x118 <main+0x46>

int encenderNum(int num);
int delay1(void);

int main (void)
{
 112:	2d 2f       	mov	r18, r29
 114:	3c 2f       	mov	r19, r28
 116:	f6 cf       	rjmp	.-20     	; 0x104 <main+0x32>
 118:	61 50       	subi	r22, 0x01	; 1
 11a:	71 09       	sbc	r23, r1

	/* Insert application code here, after the board has been initialized. */
	
	DDRB = 0xFF;
	for(int counter = 0; counter <= 15 ; counter++){
		for(int counter2 = 0x00; counter2 <= 0xFF ; counter2++){
 11c:	19 f0       	breq	.+6      	; 0x124 <main+0x52>

int encenderNum(int num);
int delay1(void);

int main (void)
{
 11e:	4a 2d       	mov	r20, r10
 120:	5c 2d       	mov	r21, r12
 122:	f7 cf       	rjmp	.-18     	; 0x112 <main+0x40>
				{
					PORTB = encenderNum(counter);
				}
			}
		}
		if (counter == 15)
 124:	0f 30       	cpi	r16, 0x0F	; 15
 126:	11 05       	cpc	r17, r1
 128:	31 f0       	breq	.+12     	; 0x136 <main+0x64>
	board_init();

	/* Insert application code here, after the board has been initialized. */
	
	DDRB = 0xFF;
	for(int counter = 0; counter <= 15 ; counter++){
 12a:	0f 5f       	subi	r16, 0xFF	; 255
 12c:	1f 4f       	sbci	r17, 0xFF	; 255
 12e:	00 31       	cpi	r16, 0x10	; 16
 130:	11 05       	cpc	r17, r1
 132:	1c f0       	brlt	.+6      	; 0x13a <main+0x68>
 134:	07 c0       	rjmp	.+14     	; 0x144 <main+0x72>
 136:	0d 2d       	mov	r16, r13
 138:	1e 2d       	mov	r17, r14
		for(int counter2 = 0x00; counter2 <= 0xFF ; counter2++){
			for (int counter3 = 0x00; counter3 <= 0xFF; counter3++)
			{
				for (int counter4 = 0x00; counter4 <=0x09; counter4++)
				{
					PORTB = encenderNum(counter);
 13a:	c8 01       	movw	r24, r16
 13c:	90 df       	rcall	.-224    	; 0x5e <encenderNum>
 13e:	6f 2d       	mov	r22, r15
 140:	7b 2d       	mov	r23, r11
 142:	ed cf       	rjmp	.-38     	; 0x11e <main+0x4c>
		if (counter == 15)
		{
			counter = -1;
		}
	}
}
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	1f 91       	pop	r17
 14e:	0f 91       	pop	r16
 150:	ff 90       	pop	r15
 152:	ef 90       	pop	r14
 154:	df 90       	pop	r13
 156:	cf 90       	pop	r12
 158:	bf 90       	pop	r11
 15a:	af 90       	pop	r10
 15c:	08 95       	ret

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
