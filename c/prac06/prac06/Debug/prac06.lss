
prac06.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000126  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000204  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000017f  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000860  00000000  00000000  000005b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000006c  00000000  00000000  00000e18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000ec04  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002fb  00000000  00000000  0000fa88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000fd83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003047  00000000  00000000  0000fdab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	24 c0       	rjmp	.+72     	; 0x4a <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>
  26:	19 c0       	rjmp	.+50     	; 0x5a <__bad_interrupt>
  28:	18 c0       	rjmp	.+48     	; 0x5a <__bad_interrupt>
  2a:	50 c0       	rjmp	.+160    	; 0xcc <encenderNum+0x6e>
  2c:	1f c0       	rjmp	.+62     	; 0x6c <encenderNum+0xe>
  2e:	21 c0       	rjmp	.+66     	; 0x72 <encenderNum+0x14>
  30:	23 c0       	rjmp	.+70     	; 0x78 <encenderNum+0x1a>
  32:	25 c0       	rjmp	.+74     	; 0x7e <encenderNum+0x20>
  34:	27 c0       	rjmp	.+78     	; 0x84 <encenderNum+0x26>
  36:	29 c0       	rjmp	.+82     	; 0x8a <encenderNum+0x2c>
  38:	2b c0       	rjmp	.+86     	; 0x90 <encenderNum+0x32>
  3a:	2d c0       	rjmp	.+90     	; 0x96 <encenderNum+0x38>
  3c:	2f c0       	rjmp	.+94     	; 0x9c <encenderNum+0x3e>
  3e:	31 c0       	rjmp	.+98     	; 0xa2 <encenderNum+0x44>
  40:	33 c0       	rjmp	.+102    	; 0xa8 <encenderNum+0x4a>
  42:	35 c0       	rjmp	.+106    	; 0xae <encenderNum+0x50>
  44:	37 c0       	rjmp	.+110    	; 0xb4 <encenderNum+0x56>
  46:	39 c0       	rjmp	.+114    	; 0xba <encenderNum+0x5c>
  48:	3b c0       	rjmp	.+118    	; 0xc0 <encenderNum+0x62>

0000004a <__ctors_end>:
  4a:	11 24       	eor	r1, r1
  4c:	1f be       	out	0x3f, r1	; 63
  4e:	cf e5       	ldi	r28, 0x5F	; 95
  50:	d2 e0       	ldi	r29, 0x02	; 2
  52:	de bf       	out	0x3e, r29	; 62
  54:	cd bf       	out	0x3d, r28	; 61
  56:	3d d0       	rcall	.+122    	; 0xd2 <main>
  58:	64 c0       	rjmp	.+200    	; 0x122 <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  5c:	08 95       	ret

0000005e <encenderNum>:
		}
	}
}

int encenderNum(int num){
	switch(num){
  5e:	80 31       	cpi	r24, 0x10	; 16
  60:	91 05       	cpc	r25, r1
  62:	88 f5       	brcc	.+98     	; 0xc6 <encenderNum+0x68>
  64:	fc 01       	movw	r30, r24
  66:	eb 5e       	subi	r30, 0xEB	; 235
  68:	ff 4f       	sbci	r31, 0xFF	; 255
  6a:	09 94       	ijmp
		case 0:{
			return 0xFD;
			break;
		}
		case 1:{
			return 0x60;
  6c:	80 e6       	ldi	r24, 0x60	; 96
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	08 95       	ret
			break;
		}
		case 2:{
			return 0xDB;
  72:	8b ed       	ldi	r24, 0xDB	; 219
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	08 95       	ret
			break;
		}
		case 3:{
			return 0xF2;
  78:	82 ef       	ldi	r24, 0xF2	; 242
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	08 95       	ret
			break;
		}
		case 4:{
			return 0x67;
  7e:	87 e6       	ldi	r24, 0x67	; 103
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	08 95       	ret
			break;
		}
		case 5:{
			return 0xB6;
  84:	86 eb       	ldi	r24, 0xB6	; 182
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	08 95       	ret
			break;
		}
		case 6:{
			return 0xBF;
  8a:	8f eb       	ldi	r24, 0xBF	; 191
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	08 95       	ret
			break;
		}
		case 7:{
			return 0xE0;
  90:	80 ee       	ldi	r24, 0xE0	; 224
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	08 95       	ret
			break;
		}
		case 8:{
			return 0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	08 95       	ret
			break;
		}
		case 9:{
			return 0xE6;
  9c:	86 ee       	ldi	r24, 0xE6	; 230
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	08 95       	ret
			break;
		}
		case 10:{
			return 0xEF;
  a2:	8f ee       	ldi	r24, 0xEF	; 239
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	08 95       	ret
			break;
		}
		case 11:{
			return 0x3E;
  a8:	8e e3       	ldi	r24, 0x3E	; 62
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	08 95       	ret
			break;
		}
		case 12:{
			return 0x9D;
  ae:	8d e9       	ldi	r24, 0x9D	; 157
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	08 95       	ret
			break;
		}
		case 13:{
			return 0x7A;
  b4:	8a e7       	ldi	r24, 0x7A	; 122
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	08 95       	ret
			break;
		}
		case 14:{
			return 0x9F;
  ba:	8f e9       	ldi	r24, 0x9F	; 159
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	08 95       	ret
			break;
		}
		case 15:{
			return 0xE2;
  c0:	82 ee       	ldi	r24, 0xE2	; 226
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	08 95       	ret
			break;
		}
		default:{
			return 0x00;
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	08 95       	ret
}

int encenderNum(int num){
	switch(num){
		case 0:{
			return 0xFD;
  cc:	8d ef       	ldi	r24, 0xFD	; 253
  ce:	90 e0       	ldi	r25, 0x00	; 0
		default:{
			return 0x00;
			break;
		}
	}
  d0:	08 95       	ret

000000d2 <main>:
#include <util/delay.h>

int encenderNum(int num);

int main (void)
{
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
  da:	c0 df       	rcall	.-128    	; 0x5c <board_init>

	/* Insert application code here, after the board has been initialized. */
	
	DDRB = 0xFF;
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	87 bb       	out	0x17, r24	; 23
	for(int counter = 0; counter <= 15 ; counter++){
  e0:	c0 e0       	ldi	r28, 0x00	; 0
  e2:	d0 e0       	ldi	r29, 0x00	; 0
  e4:	01 e0       	ldi	r16, 0x01	; 1
  e6:	10 e0       	ldi	r17, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <main+0x1c>
  ea:	c0 2f       	mov	r28, r16
  ec:	d1 2f       	mov	r29, r17
		PORTB = encenderNum(counter);
  ee:	ce 01       	movw	r24, r28
  f0:	b6 df       	rcall	.-148    	; 0x5e <encenderNum>
  f2:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	9f e7       	ldi	r25, 0x7F	; 127
  f6:	24 e8       	ldi	r18, 0x84	; 132
  f8:	8e e1       	ldi	r24, 0x1E	; 30
  fa:	91 50       	subi	r25, 0x01	; 1
  fc:	20 40       	sbci	r18, 0x00	; 0
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x28>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x32>
 104:	00 00       	nop
		_delay_ms(10000);
		if (counter == 15)
 106:	cf 30       	cpi	r28, 0x0F	; 15
 108:	d1 05       	cpc	r29, r1
 10a:	79 f3       	breq	.-34     	; 0xea <main+0x18>
	board_init();

	/* Insert application code here, after the board has been initialized. */
	
	DDRB = 0xFF;
	for(int counter = 0; counter <= 15 ; counter++){
 10c:	21 96       	adiw	r28, 0x01	; 1
 10e:	c0 31       	cpi	r28, 0x10	; 16
 110:	d1 05       	cpc	r29, r1
 112:	6c f3       	brlt	.-38     	; 0xee <main+0x1c>
		if (counter == 15)
		{
			counter = 0;
		}
	}
}
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	08 95       	ret

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
