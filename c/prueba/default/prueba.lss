
prueba.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000172  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  000001e6  2**0
                  ALLOC
  2 .debug_aranges 00000030  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000035  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000f3  00000000  00000000  0000024b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000b9  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000013e  00000000  00000000  000003f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000538  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000b9  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  00000631  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	20 c0       	rjmp	.+64     	; 0x4a <__bad_interrupt>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	1d c0       	rjmp	.+58     	; 0x4a <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__vector_8>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>
  16:	19 c0       	rjmp	.+50     	; 0x4a <__bad_interrupt>
  18:	18 c0       	rjmp	.+48     	; 0x4a <__bad_interrupt>
  1a:	17 c0       	rjmp	.+46     	; 0x4a <__bad_interrupt>
  1c:	16 c0       	rjmp	.+44     	; 0x4a <__bad_interrupt>
  1e:	15 c0       	rjmp	.+42     	; 0x4a <__bad_interrupt>
  20:	14 c0       	rjmp	.+40     	; 0x4a <__bad_interrupt>
  22:	13 c0       	rjmp	.+38     	; 0x4a <__bad_interrupt>
  24:	12 c0       	rjmp	.+36     	; 0x4a <__bad_interrupt>
  26:	11 c0       	rjmp	.+34     	; 0x4a <__bad_interrupt>
  28:	10 c0       	rjmp	.+32     	; 0x4a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_clear_bss>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	a3 36       	cpi	r26, 0x63	; 99
  42:	b1 07       	cpc	r27, r17
  44:	e1 f7       	brne	.-8      	; 0x3e <.do_clear_bss_loop>
  46:	7e d0       	rcall	.+252    	; 0x144 <main>
  48:	92 c0       	rjmp	.+292    	; 0x16e <_exit>

0000004a <__bad_interrupt>:
  4a:	da cf       	rjmp	.-76     	; 0x0 <__vectors>

0000004c <__vector_8>:
#include "iocompat.h"           /* Note [1] */

enum { UP, DOWN };

ISR (TIMER1_OVF_vect)           /* Note [2] */
{
  4c:	1f 92       	push	r1
  4e:	0f 92       	push	r0
  50:	0f b6       	in	r0, 0x3f	; 63
  52:	0f 92       	push	r0
  54:	11 24       	eor	r1, r1
  56:	2f 93       	push	r18
  58:	3f 93       	push	r19
  5a:	8f 93       	push	r24
  5c:	9f 93       	push	r25
  5e:	ef 93       	push	r30
  60:	ff 93       	push	r31
  62:	df 93       	push	r29
  64:	cf 93       	push	r28
  66:	00 d0       	rcall	.+0      	; 0x68 <__vector_8+0x1c>
  68:	cd b7       	in	r28, 0x3d	; 61
  6a:	de b7       	in	r29, 0x3e	; 62
    static uint16_t pwm;        /* Note [3] */
    static uint8_t direction;

    switch (direction)          /* Note [4] */
  6c:	80 91 60 00 	lds	r24, 0x0060
  70:	28 2f       	mov	r18, r24
  72:	30 e0       	ldi	r19, 0x00	; 0
  74:	3a 83       	std	Y+2, r19	; 0x02
  76:	29 83       	std	Y+1, r18	; 0x01
  78:	89 81       	ldd	r24, Y+1	; 0x01
  7a:	9a 81       	ldd	r25, Y+2	; 0x02
  7c:	00 97       	sbiw	r24, 0x00	; 0
  7e:	31 f0       	breq	.+12     	; 0x8c <__vector_8+0x40>
  80:	29 81       	ldd	r18, Y+1	; 0x01
  82:	3a 81       	ldd	r19, Y+2	; 0x02
  84:	21 30       	cpi	r18, 0x01	; 1
  86:	31 05       	cpc	r19, r1
  88:	b1 f0       	breq	.+44     	; 0xb6 <__vector_8+0x6a>
  8a:	26 c0       	rjmp	.+76     	; 0xd8 <__vector_8+0x8c>
    {
        case UP:
            if (++pwm == TIMER1_TOP)
  8c:	80 91 61 00 	lds	r24, 0x0061
  90:	90 91 62 00 	lds	r25, 0x0062
  94:	01 96       	adiw	r24, 0x01	; 1
  96:	90 93 62 00 	sts	0x0062, r25
  9a:	80 93 61 00 	sts	0x0061, r24
  9e:	80 91 61 00 	lds	r24, 0x0061
  a2:	90 91 62 00 	lds	r25, 0x0062
  a6:	33 e0       	ldi	r19, 0x03	; 3
  a8:	8f 3f       	cpi	r24, 0xFF	; 255
  aa:	93 07       	cpc	r25, r19
  ac:	a9 f4       	brne	.+42     	; 0xd8 <__vector_8+0x8c>
                direction = DOWN;
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	80 93 60 00 	sts	0x0060, r24
  b4:	11 c0       	rjmp	.+34     	; 0xd8 <__vector_8+0x8c>
            break;

        case DOWN:
            if (--pwm == 0)
  b6:	80 91 61 00 	lds	r24, 0x0061
  ba:	90 91 62 00 	lds	r25, 0x0062
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	90 93 62 00 	sts	0x0062, r25
  c4:	80 93 61 00 	sts	0x0061, r24
  c8:	80 91 61 00 	lds	r24, 0x0061
  cc:	90 91 62 00 	lds	r25, 0x0062
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	11 f4       	brne	.+4      	; 0xd8 <__vector_8+0x8c>
                direction = UP;
  d4:	10 92 60 00 	sts	0x0060, r1
            break;
    }

    OCR = pwm;                  /* Note [5] */
  d8:	ea e4       	ldi	r30, 0x4A	; 74
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 91 61 00 	lds	r24, 0x0061
  e0:	90 91 62 00 	lds	r25, 0x0062
  e4:	91 83       	std	Z+1, r25	; 0x01
  e6:	80 83       	st	Z, r24
}
  e8:	0f 90       	pop	r0
  ea:	0f 90       	pop	r0
  ec:	cf 91       	pop	r28
  ee:	df 91       	pop	r29
  f0:	ff 91       	pop	r31
  f2:	ef 91       	pop	r30
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	3f 91       	pop	r19
  fa:	2f 91       	pop	r18
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <ioinit>:

void
ioinit (void)                   /* Note [6] */
{
 106:	df 93       	push	r29
 108:	cf 93       	push	r28
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
    /* Timer 1 is 10-bit PWM (8-bit PWM on some ATtinys). */
    TCCR1A = TIMER1_PWM_INIT;
 10e:	ef e4       	ldi	r30, 0x4F	; 79
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	83 e8       	ldi	r24, 0x83	; 131
 114:	80 83       	st	Z, r24
     * Start timer 1.
     *
     * NB: TCCR1A and TCCR1B could actually be the same register, so
     * take care to not clobber it.
     */
    TCCR1B |= TIMER1_CLOCKSOURCE;
 116:	ae e4       	ldi	r26, 0x4E	; 78
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	ee e4       	ldi	r30, 0x4E	; 78
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	81 60       	ori	r24, 0x01	; 1
 122:	8c 93       	st	X, r24
#if defined(TIMER1_SETUP_HOOK)
    TIMER1_SETUP_HOOK();
#endif

    /* Set PWM value to 0. */
    OCR = 0;
 124:	ea e4       	ldi	r30, 0x4A	; 74
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	11 82       	std	Z+1, r1	; 0x01
 12a:	10 82       	st	Z, r1

    /* Enable OC1 as output. */
    DDROC = _BV (OC1);
 12c:	e1 e3       	ldi	r30, 0x31	; 49
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 e2       	ldi	r24, 0x20	; 32
 132:	80 83       	st	Z, r24

    /* Enable timer 1 overflow interrupt. */
    TIMSK = _BV (TOIE1);
 134:	e9 e5       	ldi	r30, 0x59	; 89
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	84 e0       	ldi	r24, 0x04	; 4
 13a:	80 83       	st	Z, r24
    sei ();
 13c:	78 94       	sei
}
 13e:	cf 91       	pop	r28
 140:	df 91       	pop	r29
 142:	08 95       	ret

00000144 <main>:

int
main (void)
{
 144:	df 93       	push	r29
 146:	cf 93       	push	r28
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62

    ioinit ();
 14c:	dc df       	rcall	.-72     	; 0x106 <ioinit>

    /* loop forever, the interrupts are doing the rest */

    for (;;)                    /* Note [7] */
        sleep_mode();
 14e:	a5 e5       	ldi	r26, 0x55	; 85
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	e5 e5       	ldi	r30, 0x55	; 85
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	80 64       	ori	r24, 0x40	; 64
 15a:	8c 93       	st	X, r24
 15c:	88 95       	sleep
 15e:	a5 e5       	ldi	r26, 0x55	; 85
 160:	b0 e0       	ldi	r27, 0x00	; 0
 162:	e5 e5       	ldi	r30, 0x55	; 85
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	8f 7b       	andi	r24, 0xBF	; 191
 16a:	8c 93       	st	X, r24
 16c:	f0 cf       	rjmp	.-32     	; 0x14e <main+0xa>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
