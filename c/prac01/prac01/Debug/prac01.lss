
prac01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000110  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000d7  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000006e  00000000  00000000  00000247  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e1  00000000  00000000  000002b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000698  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000e7ca  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e4  00000000  00000000  0000ee86  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000ef6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000152  00000000  00000000  0000ef7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	1b c0       	rjmp	.+54     	; 0x3a <__bad_interrupt>
   4:	1a c0       	rjmp	.+52     	; 0x3a <__bad_interrupt>
   6:	19 c0       	rjmp	.+50     	; 0x3a <__bad_interrupt>
   8:	18 c0       	rjmp	.+48     	; 0x3a <__bad_interrupt>
   a:	17 c0       	rjmp	.+46     	; 0x3a <__bad_interrupt>
   c:	16 c0       	rjmp	.+44     	; 0x3a <__bad_interrupt>
   e:	15 c0       	rjmp	.+42     	; 0x3a <__bad_interrupt>
  10:	14 c0       	rjmp	.+40     	; 0x3a <__bad_interrupt>
  12:	13 c0       	rjmp	.+38     	; 0x3a <__bad_interrupt>
  14:	12 c0       	rjmp	.+36     	; 0x3a <__bad_interrupt>
  16:	11 c0       	rjmp	.+34     	; 0x3a <__bad_interrupt>
  18:	10 c0       	rjmp	.+32     	; 0x3a <__bad_interrupt>
  1a:	0f c0       	rjmp	.+30     	; 0x3a <__bad_interrupt>
  1c:	0e c0       	rjmp	.+28     	; 0x3a <__bad_interrupt>
  1e:	0d c0       	rjmp	.+26     	; 0x3a <__bad_interrupt>
  20:	0c c0       	rjmp	.+24     	; 0x3a <__bad_interrupt>
  22:	0b c0       	rjmp	.+22     	; 0x3a <__bad_interrupt>
  24:	0a c0       	rjmp	.+20     	; 0x3a <__bad_interrupt>
  26:	09 c0       	rjmp	.+18     	; 0x3a <__bad_interrupt>
  28:	08 c0       	rjmp	.+16     	; 0x3a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61
  36:	02 d0       	rcall	.+4      	; 0x3c <main>
  38:	26 c0       	rjmp	.+76     	; 0x86 <_exit>

0000003a <__bad_interrupt>:
  3a:	e2 cf       	rjmp	.-60     	; 0x0 <__vectors>

0000003c <main>:
#include <avr/io.h>
#include <asf.h>

int main (void)
{	
	DDRB = 0xFF;
  3c:	8f ef       	ldi	r24, 0xFF	; 255
  3e:	87 bb       	out	0x17, r24	; 23
	for(int counter = 0x00; counter <= 0xFF ; counter++){
  40:	60 e0       	ldi	r22, 0x00	; 0
  42:	70 e0       	ldi	r23, 0x00	; 0
		PORTB = counter;
  44:	f0 e0       	ldi	r31, 0x00	; 0
  46:	e1 e0       	ldi	r30, 0x01	; 1
#include <asf.h>

int main (void)
{	
	DDRB = 0xFF;
	for(int counter = 0x00; counter <= 0xFF ; counter++){
  48:	5f 2f       	mov	r21, r31
  4a:	4e 2f       	mov	r20, r30
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	a0 e0       	ldi	r26, 0x00	; 0
  50:	02 c0       	rjmp	.+4      	; 0x56 <__SREG__+0x17>
  52:	6b 2f       	mov	r22, r27
  54:	7a 2f       	mov	r23, r26
		PORTB = counter;
  56:	68 bb       	out	0x18, r22	; 24
  58:	2f 2f       	mov	r18, r31
  5a:	3e 2f       	mov	r19, r30
  5c:	05 c0       	rjmp	.+10     	; 0x68 <__SREG__+0x29>
  5e:	01 97       	sbiw	r24, 0x01	; 1
		for (int counter2 = 0x00; counter2 <= 0xFF; counter2++)
		{
			for (int counter3 = 0x00; counter3 <=0xFF; counter3++)
  60:	f1 f7       	brne	.-4      	; 0x5e <__SREG__+0x1f>
  62:	21 50       	subi	r18, 0x01	; 1
  64:	31 09       	sbc	r19, r1
int main (void)
{	
	DDRB = 0xFF;
	for(int counter = 0x00; counter <= 0xFF ; counter++){
		PORTB = counter;
		for (int counter2 = 0x00; counter2 <= 0xFF; counter2++)
  66:	19 f0       	breq	.+6      	; 0x6e <__SREG__+0x2f>
#include <asf.h>

int main (void)
{	
	DDRB = 0xFF;
	for(int counter = 0x00; counter <= 0xFF ; counter++){
  68:	85 2f       	mov	r24, r21
  6a:	94 2f       	mov	r25, r20
  6c:	f8 cf       	rjmp	.-16     	; 0x5e <__SREG__+0x1f>
				{
					//Do nothing
				}*/
			}
		}
		if (counter == 0xFF)
  6e:	6f 3f       	cpi	r22, 0xFF	; 255
  70:	71 05       	cpc	r23, r1
  72:	79 f3       	breq	.-34     	; 0x52 <__SREG__+0x13>
#include <asf.h>

int main (void)
{	
	DDRB = 0xFF;
	for(int counter = 0x00; counter <= 0xFF ; counter++){
  74:	6f 5f       	subi	r22, 0xFF	; 255
  76:	7f 4f       	sbci	r23, 0xFF	; 255
  78:	6f 3f       	cpi	r22, 0xFF	; 255
  7a:	71 05       	cpc	r23, r1
  7c:	61 f3       	breq	.-40     	; 0x56 <__SREG__+0x17>
  7e:	5c f3       	brlt	.-42     	; 0x56 <__SREG__+0x17>
		if (counter == 0xFF)
		{
			counter = 0x00;
		}
	}
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	08 95       	ret

00000086 <_exit>:
  86:	f8 94       	cli

00000088 <__stop_program>:
  88:	ff cf       	rjmp	.-2      	; 0x88 <__stop_program>
