
prac01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000074  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000000f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000df  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000084  00000000  00000000  00000237  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d9  00000000  00000000  000002bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000694  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000e7d9  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d5  00000000  00000000  0000ee91  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000ef66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000152  00000000  00000000  0000ef8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	1b c0       	rjmp	.+54     	; 0x3a <__bad_interrupt>
   4:	1a c0       	rjmp	.+52     	; 0x3a <__bad_interrupt>
   6:	19 c0       	rjmp	.+50     	; 0x3a <__bad_interrupt>
   8:	18 c0       	rjmp	.+48     	; 0x3a <__bad_interrupt>
   a:	17 c0       	rjmp	.+46     	; 0x3a <__bad_interrupt>
   c:	16 c0       	rjmp	.+44     	; 0x3a <__bad_interrupt>
   e:	15 c0       	rjmp	.+42     	; 0x3a <__bad_interrupt>
  10:	14 c0       	rjmp	.+40     	; 0x3a <__bad_interrupt>
  12:	13 c0       	rjmp	.+38     	; 0x3a <__bad_interrupt>
  14:	12 c0       	rjmp	.+36     	; 0x3a <__bad_interrupt>
  16:	11 c0       	rjmp	.+34     	; 0x3a <__bad_interrupt>
  18:	10 c0       	rjmp	.+32     	; 0x3a <__bad_interrupt>
  1a:	0f c0       	rjmp	.+30     	; 0x3a <__bad_interrupt>
  1c:	0e c0       	rjmp	.+28     	; 0x3a <__bad_interrupt>
  1e:	0d c0       	rjmp	.+26     	; 0x3a <__bad_interrupt>
  20:	0c c0       	rjmp	.+24     	; 0x3a <__bad_interrupt>
  22:	0b c0       	rjmp	.+22     	; 0x3a <__bad_interrupt>
  24:	0a c0       	rjmp	.+20     	; 0x3a <__bad_interrupt>
  26:	09 c0       	rjmp	.+18     	; 0x3a <__bad_interrupt>
  28:	08 c0       	rjmp	.+16     	; 0x3a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61
  36:	02 d0       	rcall	.+4      	; 0x3c <main>
  38:	1b c0       	rjmp	.+54     	; 0x70 <_exit>

0000003a <__bad_interrupt>:
  3a:	e2 cf       	rjmp	.-60     	; 0x0 <__vectors>

0000003c <main>:
#include <asf.h>

int main (void)
{	
	int portBValue = 0x00;
	DDRB = 0xFF;
  3c:	8f ef       	ldi	r24, 0xFF	; 255
  3e:	87 bb       	out	0x17, r24	; 23
	while(true){
		PORTB = portBValue;
  40:	b0 e0       	ldi	r27, 0x00	; 0
  42:	a1 e0       	ldi	r26, 0x01	; 1

#include <avr/io.h>
#include <asf.h>

int main (void)
{	
  44:	fb 2f       	mov	r31, r27
  46:	ea 2f       	mov	r30, r26
  48:	5b 2f       	mov	r21, r27
  4a:	4a 2f       	mov	r20, r26
	int portBValue = 0x00;
	DDRB = 0xFF;
	while(true){
		PORTB = portBValue;
  4c:	18 ba       	out	0x18, r1	; 24
  4e:	6b 2f       	mov	r22, r27
  50:	7a 2f       	mov	r23, r26
  52:	0b c0       	rjmp	.+22     	; 0x6a <__SREG__+0x2b>
  54:	01 97       	sbiw	r24, 0x01	; 1
		for(int counter = 0x00; counter <= 0xFF ; counter++)
		{
			for (int counter2 = 0x00; counter2 <= 0xFF; counter2++)
			{
				for (int counter3 = 0x00; counter3 <=0xFF; counter3++)
  56:	f1 f7       	brne	.-4      	; 0x54 <__SREG__+0x15>
  58:	21 50       	subi	r18, 0x01	; 1
  5a:	31 09       	sbc	r19, r1
	DDRB = 0xFF;
	while(true){
		PORTB = portBValue;
		for(int counter = 0x00; counter <= 0xFF ; counter++)
		{
			for (int counter2 = 0x00; counter2 <= 0xFF; counter2++)
  5c:	19 f0       	breq	.+6      	; 0x64 <__SREG__+0x25>

#include <avr/io.h>
#include <asf.h>

int main (void)
{	
  5e:	85 2f       	mov	r24, r21
  60:	94 2f       	mov	r25, r20
  62:	f8 cf       	rjmp	.-16     	; 0x54 <__SREG__+0x15>
  64:	61 50       	subi	r22, 0x01	; 1
  66:	71 09       	sbc	r23, r1
	int portBValue = 0x00;
	DDRB = 0xFF;
	while(true){
		PORTB = portBValue;
		for(int counter = 0x00; counter <= 0xFF ; counter++)
  68:	89 f3       	breq	.-30     	; 0x4c <__SREG__+0xd>

#include <avr/io.h>
#include <asf.h>

int main (void)
{	
  6a:	2f 2f       	mov	r18, r31
  6c:	3e 2f       	mov	r19, r30
  6e:	f7 cf       	rjmp	.-18     	; 0x5e <__SREG__+0x1f>

00000070 <_exit>:
  70:	f8 94       	cli

00000072 <__stop_program>:
  72:	ff cf       	rjmp	.-2      	; 0x72 <__stop_program>
