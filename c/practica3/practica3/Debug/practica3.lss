
practica3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000070  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000000f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000097  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000062  00000000  00000000  000001eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000d7  00000000  00000000  0000024d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000140  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000034  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	1b c0       	rjmp	.+54     	; 0x3a <__bad_interrupt>
   4:	1a c0       	rjmp	.+52     	; 0x3a <__bad_interrupt>
   6:	19 c0       	rjmp	.+50     	; 0x3a <__bad_interrupt>
   8:	18 c0       	rjmp	.+48     	; 0x3a <__bad_interrupt>
   a:	17 c0       	rjmp	.+46     	; 0x3a <__bad_interrupt>
   c:	16 c0       	rjmp	.+44     	; 0x3a <__bad_interrupt>
   e:	15 c0       	rjmp	.+42     	; 0x3a <__bad_interrupt>
  10:	14 c0       	rjmp	.+40     	; 0x3a <__bad_interrupt>
  12:	13 c0       	rjmp	.+38     	; 0x3a <__bad_interrupt>
  14:	12 c0       	rjmp	.+36     	; 0x3a <__bad_interrupt>
  16:	11 c0       	rjmp	.+34     	; 0x3a <__bad_interrupt>
  18:	10 c0       	rjmp	.+32     	; 0x3a <__bad_interrupt>
  1a:	0f c0       	rjmp	.+30     	; 0x3a <__bad_interrupt>
  1c:	0e c0       	rjmp	.+28     	; 0x3a <__bad_interrupt>
  1e:	0d c0       	rjmp	.+26     	; 0x3a <__bad_interrupt>
  20:	0c c0       	rjmp	.+24     	; 0x3a <__bad_interrupt>
  22:	0b c0       	rjmp	.+22     	; 0x3a <__bad_interrupt>
  24:	0a c0       	rjmp	.+20     	; 0x3a <__bad_interrupt>
  26:	09 c0       	rjmp	.+18     	; 0x3a <__bad_interrupt>
  28:	08 c0       	rjmp	.+16     	; 0x3a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61
  36:	02 d0       	rcall	.+4      	; 0x3c <main>
  38:	19 c0       	rjmp	.+50     	; 0x6c <_exit>

0000003a <__bad_interrupt>:
  3a:	e2 cf       	rjmp	.-60     	; 0x0 <__vectors>

0000003c <main>:
#include <avr/sfr_defs.h> // Para la macro _BV()

int main(void)
{
	int portBValue = 0x00;
	DDRB = 0xFF;						//Define DDRB como salidas
  3c:	8f ef       	ldi	r24, 0xFF	; 255
  3e:	87 bb       	out	0x17, r24	; 23
	PORTB = portBValue;					//Se define el valor del puerto B en 00
  40:	18 ba       	out	0x18, r1	; 24
	TCCR1B = _BV(CS11) | _BV(CS10);		//Enciende el bit CS11 del timer 1 para frecuencia CLK/8
  42:	83 e0       	ldi	r24, 0x03	; 3
  44:	8e bd       	out	0x2e, r24	; 46
#include <avr/io.h>
#include <avr/sfr_defs.h> // Para la macro _BV()

int main(void)
{
	int portBValue = 0x00;
  46:	80 e0       	ldi	r24, 0x00	; 0
  48:	90 e0       	ldi	r25, 0x00	; 0
		// si ya hubo desbordamiento del timer1:
		if((TIFR & _BV(TOV1))){
			TIFR |= _BV(TOV1);			// limpia la bandera
			PORTB = portBValue;			//Muestra el valor en los LEDS
			if(portBValue == 0xFF)		//Si el valor es igual a 255
				portBValue = 0x00;		//	regresar a 0
  4a:	40 e0       	ldi	r20, 0x00	; 0
  4c:	30 e0       	ldi	r19, 0x00	; 0
  4e:	02 c0       	rjmp	.+4      	; 0x54 <__SREG__+0x15>
  50:	84 2f       	mov	r24, r20
  52:	93 2f       	mov	r25, r19
	
	/*Aqui va el codigo a ciclar*/
    while (1) 
    {
		// si ya hubo desbordamiento del timer1:
		if((TIFR & _BV(TOV1))){
  54:	08 b6       	in	r0, 0x38	; 56
  56:	02 fe       	sbrs	r0, 2
  58:	fd cf       	rjmp	.-6      	; 0x54 <__SREG__+0x15>
			TIFR |= _BV(TOV1);			// limpia la bandera
  5a:	28 b7       	in	r18, 0x38	; 56
  5c:	24 60       	ori	r18, 0x04	; 4
  5e:	28 bf       	out	0x38, r18	; 56
			PORTB = portBValue;			//Muestra el valor en los LEDS
  60:	88 bb       	out	0x18, r24	; 24
			if(portBValue == 0xFF)		//Si el valor es igual a 255
  62:	8f 3f       	cpi	r24, 0xFF	; 255
  64:	91 05       	cpc	r25, r1
  66:	a1 f3       	breq	.-24     	; 0x50 <__SREG__+0x11>
				portBValue = 0x00;		//	regresar a 0
			else                        //De otra forma
				portBValue++;			//Incrementa el valor
  68:	01 96       	adiw	r24, 0x01	; 1
  6a:	f4 cf       	rjmp	.-24     	; 0x54 <__SREG__+0x15>

0000006c <_exit>:
  6c:	f8 94       	cli

0000006e <__stop_program>:
  6e:	ff cf       	rjmp	.-2      	; 0x6e <__stop_program>
