
prac0p1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000118  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001df  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d1  00000000  00000000  000003e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042d  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000008e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000e8a3  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002a7  00000000  00000000  0000f1ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000f496  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000182  00000000  00000000  0000f4c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	1b c0       	rjmp	.+54     	; 0x3a <__bad_interrupt>
   4:	1a c0       	rjmp	.+52     	; 0x3a <__bad_interrupt>
   6:	19 c0       	rjmp	.+50     	; 0x3a <__bad_interrupt>
   8:	18 c0       	rjmp	.+48     	; 0x3a <__bad_interrupt>
   a:	17 c0       	rjmp	.+46     	; 0x3a <__bad_interrupt>
   c:	16 c0       	rjmp	.+44     	; 0x3a <__bad_interrupt>
   e:	15 c0       	rjmp	.+42     	; 0x3a <__bad_interrupt>
  10:	14 c0       	rjmp	.+40     	; 0x3a <__bad_interrupt>
  12:	13 c0       	rjmp	.+38     	; 0x3a <__bad_interrupt>
  14:	12 c0       	rjmp	.+36     	; 0x3a <__bad_interrupt>
  16:	11 c0       	rjmp	.+34     	; 0x3a <__bad_interrupt>
  18:	10 c0       	rjmp	.+32     	; 0x3a <__bad_interrupt>
  1a:	0f c0       	rjmp	.+30     	; 0x3a <__bad_interrupt>
  1c:	0e c0       	rjmp	.+28     	; 0x3a <__bad_interrupt>
  1e:	0d c0       	rjmp	.+26     	; 0x3a <__bad_interrupt>
  20:	0c c0       	rjmp	.+24     	; 0x3a <__bad_interrupt>
  22:	0b c0       	rjmp	.+22     	; 0x3a <__bad_interrupt>
  24:	0a c0       	rjmp	.+20     	; 0x3a <__bad_interrupt>
  26:	09 c0       	rjmp	.+18     	; 0x3a <__bad_interrupt>
  28:	08 c0       	rjmp	.+16     	; 0x3a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61
  36:	50 d0       	rcall	.+160    	; 0xd8 <main>
  38:	6d c0       	rjmp	.+218    	; 0x114 <_exit>

0000003a <__bad_interrupt>:
  3a:	e2 cf       	rjmp	.-60     	; 0x0 <__vectors>

0000003c <delay1>:
	delay1(true,false,false,false,false,false,true,false);
	//Prende led Rojo 2 y verde 1
	delay1(false,false,false,false,false,false,false,false);
 }

void delay1(bool r1, bool a1, bool v1, bool vuelta1, bool r2, bool a2, bool v2, bool vuelta2){
  3c:	af 92       	push	r10
  3e:	cf 92       	push	r12
  40:	ef 92       	push	r14
  42:	0f 93       	push	r16
  44:	cf 93       	push	r28
  46:	df 93       	push	r29
  48:	c0 e0       	ldi	r28, 0x00	; 0
  4a:	d1 e0       	ldi	r29, 0x01	; 1
  4c:	70 e0       	ldi	r23, 0x00	; 0
  4e:	51 e0       	ldi	r21, 0x01	; 1
  50:	3a eb       	ldi	r19, 0xBA	; 186
  52:	90 e0       	ldi	r25, 0x00	; 0
  54:	09 c0       	rjmp	.+18     	; 0x68 <__SREG__+0x29>
  56:	31 97       	sbiw	r30, 0x01	; 1
	for(int counter = 0x00; counter <= 0xFF; counter++)
	{
		for (int counter2 = 0x00; counter2 <= 0xFF; counter2++)
		{
			for (int counter3 = 0x00; counter3 <=0xB9; counter3++)
  58:	f1 f7       	brne	.-4      	; 0x56 <__SREG__+0x17>
  5a:	11 97       	sbiw	r26, 0x01	; 1
 }

void delay1(bool r1, bool a1, bool v1, bool vuelta1, bool r2, bool a2, bool v2, bool vuelta2){
	for(int counter = 0x00; counter <= 0xFF; counter++)
	{
		for (int counter2 = 0x00; counter2 <= 0xFF; counter2++)
  5c:	19 f0       	breq	.+6      	; 0x64 <__SREG__+0x25>
	delay1(true,false,false,false,false,false,true,false);
	//Prende led Rojo 2 y verde 1
	delay1(false,false,false,false,false,false,false,false);
 }

void delay1(bool r1, bool a1, bool v1, bool vuelta1, bool r2, bool a2, bool v2, bool vuelta2){
  5e:	e3 2f       	mov	r30, r19
  60:	f9 2f       	mov	r31, r25
  62:	f9 cf       	rjmp	.-14     	; 0x56 <__SREG__+0x17>
  64:	21 97       	sbiw	r28, 0x01	; 1
	for(int counter = 0x00; counter <= 0xFF; counter++)
  66:	19 f0       	breq	.+6      	; 0x6e <__SREG__+0x2f>
	delay1(true,false,false,false,false,false,true,false);
	//Prende led Rojo 2 y verde 1
	delay1(false,false,false,false,false,false,false,false);
 }

void delay1(bool r1, bool a1, bool v1, bool vuelta1, bool r2, bool a2, bool v2, bool vuelta2){
  68:	a7 2f       	mov	r26, r23
  6a:	b5 2f       	mov	r27, r21
  6c:	f8 cf       	rjmp	.-16     	; 0x5e <__SREG__+0x1f>
			{
			}
		}
		
	}
	PORTB |= _ROJO1(r1);
  6e:	98 b3       	in	r25, 0x18	; 24
  70:	89 2b       	or	r24, r25
  72:	88 bb       	out	0x18, r24	; 24
	PORTB |= _AMBAR1(a1);
  74:	88 b3       	in	r24, 0x18	; 24
  76:	66 0f       	add	r22, r22
  78:	86 2b       	or	r24, r22
  7a:	88 bb       	out	0x18, r24	; 24
	PORTB |= _VERDE1(v1);
  7c:	88 b3       	in	r24, 0x18	; 24
  7e:	44 0f       	add	r20, r20
  80:	44 0f       	add	r20, r20
  82:	84 2b       	or	r24, r20
  84:	88 bb       	out	0x18, r24	; 24
	PORTB |= _VUELTA1(vuelta1);
  86:	88 b3       	in	r24, 0x18	; 24
  88:	22 0f       	add	r18, r18
  8a:	22 0f       	add	r18, r18
  8c:	22 0f       	add	r18, r18
  8e:	82 2b       	or	r24, r18
  90:	88 bb       	out	0x18, r24	; 24
	PORTB |= _ROJO2(r2);
  92:	28 b3       	in	r18, 0x18	; 24
  94:	30 e1       	ldi	r19, 0x10	; 16
  96:	03 9f       	mul	r16, r19
  98:	c0 01       	movw	r24, r0
  9a:	11 24       	eor	r1, r1
  9c:	82 2b       	or	r24, r18
  9e:	88 bb       	out	0x18, r24	; 24
	PORTB |= _AMBAR2(a2);
  a0:	28 b3       	in	r18, 0x18	; 24
  a2:	30 e2       	ldi	r19, 0x20	; 32
  a4:	e3 9e       	mul	r14, r19
  a6:	c0 01       	movw	r24, r0
  a8:	11 24       	eor	r1, r1
  aa:	82 2b       	or	r24, r18
  ac:	88 bb       	out	0x18, r24	; 24
	PORTB |= _VERDE2(v2);
  ae:	28 b3       	in	r18, 0x18	; 24
  b0:	30 e4       	ldi	r19, 0x40	; 64
  b2:	c3 9e       	mul	r12, r19
  b4:	c0 01       	movw	r24, r0
  b6:	11 24       	eor	r1, r1
  b8:	82 2b       	or	r24, r18
  ba:	88 bb       	out	0x18, r24	; 24
	PORTB |= _VUELTA2(vuelta2);
  bc:	28 b3       	in	r18, 0x18	; 24
  be:	30 e8       	ldi	r19, 0x80	; 128
  c0:	a3 9e       	mul	r10, r19
  c2:	c0 01       	movw	r24, r0
  c4:	11 24       	eor	r1, r1
  c6:	82 2b       	or	r24, r18
  c8:	88 bb       	out	0x18, r24	; 24
  ca:	df 91       	pop	r29
  cc:	cf 91       	pop	r28
  ce:	0f 91       	pop	r16
  d0:	ef 90       	pop	r14
  d2:	cf 90       	pop	r12
  d4:	af 90       	pop	r10
  d6:	08 95       	ret

000000d8 <main>:
void delay1(bool r1, bool a1, bool v1, bool vuelta1, bool r2, bool a2, bool v2, bool vuelta2);
void delay2(bool r1, bool a1, bool v1, bool vuelta1, bool r2, bool a2, bool v2, bool vuelta2);
void delay3(bool r1, bool a1, bool v1, bool vuelta1, bool r2, bool a2, bool v2, bool vuelta2);

 int main (void)
 {
  d8:	af 92       	push	r10
  da:	cf 92       	push	r12
  dc:	ef 92       	push	r14
  de:	0f 93       	push	r16
	DDRB = 0xFF;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
  e4:	18 ba       	out	0x18, r1	; 24
	//Prende led Rojo 1 y verde 2
	delay1(true,false,false,false,false,false,true,false);
  e6:	a1 2c       	mov	r10, r1
  e8:	cc 24       	eor	r12, r12
  ea:	c3 94       	inc	r12
  ec:	e1 2c       	mov	r14, r1
  ee:	00 e0       	ldi	r16, 0x00	; 0
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	a1 df       	rcall	.-190    	; 0x3c <delay1>
	//Prende led Rojo 2 y verde 1
	delay1(false,false,false,false,false,false,false,false);
  fa:	c1 2c       	mov	r12, r1
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	40 e0       	ldi	r20, 0x00	; 0
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	9b df       	rcall	.-202    	; 0x3c <delay1>
 }
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0f 91       	pop	r16
 10c:	ef 90       	pop	r14
 10e:	cf 90       	pop	r12
 110:	af 90       	pop	r10
 112:	08 95       	ret

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
