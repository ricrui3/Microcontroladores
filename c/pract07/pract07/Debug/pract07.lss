
pract07.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000086  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000da  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000000fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000008d  00000000  00000000  00000115  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000050  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000cf  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000095  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000018  00000000  00000000  00000379  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	1b c0       	rjmp	.+54     	; 0x3a <__bad_interrupt>
   4:	1a c0       	rjmp	.+52     	; 0x3a <__bad_interrupt>
   6:	19 c0       	rjmp	.+50     	; 0x3a <__bad_interrupt>
   8:	18 c0       	rjmp	.+48     	; 0x3a <__bad_interrupt>
   a:	17 c0       	rjmp	.+46     	; 0x3a <__bad_interrupt>
   c:	16 c0       	rjmp	.+44     	; 0x3a <__bad_interrupt>
   e:	15 c0       	rjmp	.+42     	; 0x3a <__bad_interrupt>
  10:	14 c0       	rjmp	.+40     	; 0x3a <__bad_interrupt>
  12:	13 c0       	rjmp	.+38     	; 0x3a <__bad_interrupt>
  14:	12 c0       	rjmp	.+36     	; 0x3a <__bad_interrupt>
  16:	11 c0       	rjmp	.+34     	; 0x3a <__bad_interrupt>
  18:	10 c0       	rjmp	.+32     	; 0x3a <__bad_interrupt>
  1a:	0f c0       	rjmp	.+30     	; 0x3a <__bad_interrupt>
  1c:	0e c0       	rjmp	.+28     	; 0x3a <__bad_interrupt>
  1e:	0d c0       	rjmp	.+26     	; 0x3a <__bad_interrupt>
  20:	0c c0       	rjmp	.+24     	; 0x3a <__bad_interrupt>
  22:	0b c0       	rjmp	.+22     	; 0x3a <__bad_interrupt>
  24:	0a c0       	rjmp	.+20     	; 0x3a <__bad_interrupt>
  26:	09 c0       	rjmp	.+18     	; 0x3a <__bad_interrupt>
  28:	08 c0       	rjmp	.+16     	; 0x3a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61
  36:	02 d0       	rcall	.+4      	; 0x3c <main>
  38:	24 c0       	rjmp	.+72     	; 0x82 <_exit>

0000003a <__bad_interrupt>:
  3a:	e2 cf       	rjmp	.-60     	; 0x0 <__vectors>

0000003c <main>:

#include <stdio.h>
#include <avr/io.h>
#include <avr/sfr_defs.h>

int main(void) {
  3c:	cf 93       	push	r28
  3e:	df 93       	push	r29
 	UBRRL = 79;									//SE CONFIGURA LA FRECUENCIA
  40:	8f e4       	ldi	r24, 0x4F	; 79
  42:	89 b9       	out	0x09, r24	; 9
												//	9600@12MHz
 	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);	//8 bits de datos a enviar
  44:	86 e8       	ldi	r24, 0x86	; 134
  46:	80 bd       	out	0x20, r24	; 32
 	UCSRB = (1<<TXEN);							//SE ENCIENDE EN MODO DE TRANSMISION
  48:	88 e0       	ldi	r24, 0x08	; 8
  4a:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;								//Define DDRB como salidas
  4c:	8f ef       	ldi	r24, 0xFF	; 255
  4e:	87 bb       	out	0x17, r24	; 23
	TCCR1B = _BV(CS11);							//Enciende el bit CS11 del timer 1 para
  50:	82 e0       	ldi	r24, 0x02	; 2
  52:	8e bd       	out	0x2e, r24	; 46
			
	
	//infinite branch
	while(1){
		//Comprueba si ya hubo desbordamiento del timer1:
		if((TIFR & _BV(TOV1))){
  54:	e8 e5       	ldi	r30, 0x58	; 88
  56:	f0 e0       	ldi	r31, 0x00	; 0
			TIFR |= _BV(TOV1);					//Limpia la bandera
			PORTB = PortData;					//Muestra el valor del caracter a enviar 
  58:	28 e3       	ldi	r18, 0x38	; 56
  5a:	30 e0       	ldi	r19, 0x00	; 0
  5c:	92 e5       	ldi	r25, 0x52	; 82
												//	en los LEDS
			UDR = PortData;						//Transmite la informacion
  5e:	4c e2       	ldi	r20, 0x2C	; 44
  60:	50 e0       	ldi	r21, 0x00	; 0
			while(!(UCSRA&(1<<UDRE)));			//Espera a que se termine de transmitir
  62:	ab e2       	ldi	r26, 0x2B	; 43
  64:	b0 e0       	ldi	r27, 0x00	; 0
			
	
	//infinite branch
	while(1){
		//Comprueba si ya hubo desbordamiento del timer1:
		if((TIFR & _BV(TOV1))){
  66:	80 81       	ld	r24, Z
  68:	82 ff       	sbrs	r24, 2
  6a:	fd cf       	rjmp	.-6      	; 0x66 <__SREG__+0x27>
			TIFR |= _BV(TOV1);					//Limpia la bandera
  6c:	80 81       	ld	r24, Z
  6e:	84 60       	ori	r24, 0x04	; 4
  70:	80 83       	st	Z, r24
			PORTB = PortData;					//Muestra el valor del caracter a enviar 
  72:	e9 01       	movw	r28, r18
  74:	98 83       	st	Y, r25
												//	en los LEDS
			UDR = PortData;						//Transmite la informacion
  76:	ea 01       	movw	r28, r20
  78:	98 83       	st	Y, r25
			while(!(UCSRA&(1<<UDRE)));			//Espera a que se termine de transmitir
  7a:	8c 91       	ld	r24, X
  7c:	85 ff       	sbrs	r24, 5
  7e:	fd cf       	rjmp	.-6      	; 0x7a <__SREG__+0x3b>
  80:	f2 cf       	rjmp	.-28     	; 0x66 <__SREG__+0x27>

00000082 <_exit>:
  82:	f8 94       	cli

00000084 <__stop_program>:
  84:	ff cf       	rjmp	.-2      	; 0x84 <__stop_program>
