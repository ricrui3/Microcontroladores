
practica1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000a9  00000000  00000000  00000171  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000054  00000000  00000000  0000021a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000021b  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  0000048c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000a7  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_macinfo 000041c5  00000000  00000000  00000553  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  00004718  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	1b c0       	rjmp	.+54     	; 0x3a <__bad_interrupt>
   4:	1a c0       	rjmp	.+52     	; 0x3a <__bad_interrupt>
   6:	19 c0       	rjmp	.+50     	; 0x3a <__bad_interrupt>
   8:	18 c0       	rjmp	.+48     	; 0x3a <__bad_interrupt>
   a:	17 c0       	rjmp	.+46     	; 0x3a <__bad_interrupt>
   c:	16 c0       	rjmp	.+44     	; 0x3a <__bad_interrupt>
   e:	15 c0       	rjmp	.+42     	; 0x3a <__bad_interrupt>
  10:	14 c0       	rjmp	.+40     	; 0x3a <__bad_interrupt>
  12:	13 c0       	rjmp	.+38     	; 0x3a <__bad_interrupt>
  14:	12 c0       	rjmp	.+36     	; 0x3a <__bad_interrupt>
  16:	11 c0       	rjmp	.+34     	; 0x3a <__bad_interrupt>
  18:	10 c0       	rjmp	.+32     	; 0x3a <__bad_interrupt>
  1a:	0f c0       	rjmp	.+30     	; 0x3a <__bad_interrupt>
  1c:	0e c0       	rjmp	.+28     	; 0x3a <__bad_interrupt>
  1e:	0d c0       	rjmp	.+26     	; 0x3a <__bad_interrupt>
  20:	0c c0       	rjmp	.+24     	; 0x3a <__bad_interrupt>
  22:	0b c0       	rjmp	.+22     	; 0x3a <__bad_interrupt>
  24:	0a c0       	rjmp	.+20     	; 0x3a <__bad_interrupt>
  26:	09 c0       	rjmp	.+18     	; 0x3a <__bad_interrupt>
  28:	08 c0       	rjmp	.+16     	; 0x3a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61
  36:	02 d0       	rcall	.+4      	; 0x3c <main>
  38:	52 c0       	rjmp	.+164    	; 0xde <_exit>

0000003a <__bad_interrupt>:
  3a:	e2 cf       	rjmp	.-60     	; 0x0 <__vectors>

0000003c <main>:
#include <avr/io.h>

int main (void)
{	
  3c:	df 93       	push	r29
  3e:	cf 93       	push	r28
  40:	00 d0       	rcall	.+0      	; 0x42 <__SREG__+0x3>
  42:	00 d0       	rcall	.+0      	; 0x44 <__SREG__+0x5>
  44:	00 d0       	rcall	.+0      	; 0x46 <__SREG__+0x7>
  46:	cd b7       	in	r28, 0x3d	; 61
  48:	de b7       	in	r29, 0x3e	; 62
	int counter = 0x00;
  4a:	1e 82       	std	Y+6, r1	; 0x06
  4c:	1d 82       	std	Y+5, r1	; 0x05
	int counter2 = 0x00;
  4e:	1c 82       	std	Y+4, r1	; 0x04
  50:	1b 82       	std	Y+3, r1	; 0x03
	int counter3 = 0x00;
  52:	1a 82       	std	Y+2, r1	; 0x02
  54:	19 82       	std	Y+1, r1	; 0x01

	DDRB = 0xFF;
  56:	e7 e3       	ldi	r30, 0x37	; 55
  58:	f0 e0       	ldi	r31, 0x00	; 0
  5a:	8f ef       	ldi	r24, 0xFF	; 255
  5c:	80 83       	st	Z, r24
	for(counter = 0x00; counter <= 0xFF ; counter++){
  5e:	1e 82       	std	Y+6, r1	; 0x06
  60:	1d 82       	std	Y+5, r1	; 0x05
  62:	2c c0       	rjmp	.+88     	; 0xbc <__SREG__+0x7d>
		PORTB = counter;
  64:	e8 e3       	ldi	r30, 0x38	; 56
  66:	f0 e0       	ldi	r31, 0x00	; 0
  68:	8d 81       	ldd	r24, Y+5	; 0x05
  6a:	80 83       	st	Z, r24
		for (counter2 = 0x00; counter2 <= 0xFF; counter2++)
  6c:	1c 82       	std	Y+4, r1	; 0x04
  6e:	1b 82       	std	Y+3, r1	; 0x03
  70:	13 c0       	rjmp	.+38     	; 0x98 <__SREG__+0x59>
		{
			for (counter3 = 0x00; counter3 <=0xFF; counter3++)
  72:	1a 82       	std	Y+2, r1	; 0x02
  74:	19 82       	std	Y+1, r1	; 0x01
  76:	05 c0       	rjmp	.+10     	; 0x82 <__SREG__+0x43>
  78:	89 81       	ldd	r24, Y+1	; 0x01
  7a:	9a 81       	ldd	r25, Y+2	; 0x02
  7c:	01 96       	adiw	r24, 0x01	; 1
  7e:	9a 83       	std	Y+2, r25	; 0x02
  80:	89 83       	std	Y+1, r24	; 0x01
  82:	89 81       	ldd	r24, Y+1	; 0x01
  84:	9a 81       	ldd	r25, Y+2	; 0x02
  86:	8f 3f       	cpi	r24, 0xFF	; 255
  88:	91 05       	cpc	r25, r1
  8a:	b1 f3       	breq	.-20     	; 0x78 <__SREG__+0x39>
  8c:	ac f3       	brlt	.-22     	; 0x78 <__SREG__+0x39>
	int counter3 = 0x00;

	DDRB = 0xFF;
	for(counter = 0x00; counter <= 0xFF ; counter++){
		PORTB = counter;
		for (counter2 = 0x00; counter2 <= 0xFF; counter2++)
  8e:	8b 81       	ldd	r24, Y+3	; 0x03
  90:	9c 81       	ldd	r25, Y+4	; 0x04
  92:	01 96       	adiw	r24, 0x01	; 1
  94:	9c 83       	std	Y+4, r25	; 0x04
  96:	8b 83       	std	Y+3, r24	; 0x03
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	9c 81       	ldd	r25, Y+4	; 0x04
  9c:	8f 3f       	cpi	r24, 0xFF	; 255
  9e:	91 05       	cpc	r25, r1
  a0:	41 f3       	breq	.-48     	; 0x72 <__SREG__+0x33>
  a2:	3c f3       	brlt	.-50     	; 0x72 <__SREG__+0x33>
				{
					//Do nothing
				}*/
			}
		}
		if (counter == 0xFF)
  a4:	8d 81       	ldd	r24, Y+5	; 0x05
  a6:	9e 81       	ldd	r25, Y+6	; 0x06
  a8:	8f 3f       	cpi	r24, 0xFF	; 255
  aa:	91 05       	cpc	r25, r1
  ac:	11 f4       	brne	.+4      	; 0xb2 <__SREG__+0x73>
		{
			counter = 0x00;
  ae:	1e 82       	std	Y+6, r1	; 0x06
  b0:	1d 82       	std	Y+5, r1	; 0x05
	int counter = 0x00;
	int counter2 = 0x00;
	int counter3 = 0x00;

	DDRB = 0xFF;
	for(counter = 0x00; counter <= 0xFF ; counter++){
  b2:	8d 81       	ldd	r24, Y+5	; 0x05
  b4:	9e 81       	ldd	r25, Y+6	; 0x06
  b6:	01 96       	adiw	r24, 0x01	; 1
  b8:	9e 83       	std	Y+6, r25	; 0x06
  ba:	8d 83       	std	Y+5, r24	; 0x05
  bc:	8d 81       	ldd	r24, Y+5	; 0x05
  be:	9e 81       	ldd	r25, Y+6	; 0x06
  c0:	8f 3f       	cpi	r24, 0xFF	; 255
  c2:	91 05       	cpc	r25, r1
  c4:	79 f2       	breq	.-98     	; 0x64 <__SREG__+0x25>
  c6:	74 f2       	brlt	.-100    	; 0x64 <__SREG__+0x25>
		if (counter == 0xFF)
		{
			counter = 0x00;
		}
	}
	return 0;
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	26 96       	adiw	r28, 0x06	; 6
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	f8 94       	cli
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	cf 91       	pop	r28
  da:	df 91       	pop	r29
  dc:	08 95       	ret

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
