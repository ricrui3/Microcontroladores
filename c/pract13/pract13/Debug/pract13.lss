
pract13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000000e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000a7  00000000  00000000  000000fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000006e  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000009f  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000a1  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000018  00000000  00000000  00000375  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  0000038d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	1b c0       	rjmp	.+54     	; 0x3a <__bad_interrupt>
   4:	1a c0       	rjmp	.+52     	; 0x3a <__bad_interrupt>
   6:	19 c0       	rjmp	.+50     	; 0x3a <__bad_interrupt>
   8:	18 c0       	rjmp	.+48     	; 0x3a <__bad_interrupt>
   a:	17 c0       	rjmp	.+46     	; 0x3a <__bad_interrupt>
   c:	16 c0       	rjmp	.+44     	; 0x3a <__bad_interrupt>
   e:	15 c0       	rjmp	.+42     	; 0x3a <__bad_interrupt>
  10:	14 c0       	rjmp	.+40     	; 0x3a <__bad_interrupt>
  12:	13 c0       	rjmp	.+38     	; 0x3a <__bad_interrupt>
  14:	12 c0       	rjmp	.+36     	; 0x3a <__bad_interrupt>
  16:	11 c0       	rjmp	.+34     	; 0x3a <__bad_interrupt>
  18:	10 c0       	rjmp	.+32     	; 0x3a <__bad_interrupt>
  1a:	0f c0       	rjmp	.+30     	; 0x3a <__bad_interrupt>
  1c:	0e c0       	rjmp	.+28     	; 0x3a <__bad_interrupt>
  1e:	0d c0       	rjmp	.+26     	; 0x3a <__bad_interrupt>
  20:	0c c0       	rjmp	.+24     	; 0x3a <__bad_interrupt>
  22:	0b c0       	rjmp	.+22     	; 0x3a <__bad_interrupt>
  24:	0a c0       	rjmp	.+20     	; 0x3a <__bad_interrupt>
  26:	09 c0       	rjmp	.+18     	; 0x3a <__bad_interrupt>
  28:	08 c0       	rjmp	.+16     	; 0x3a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61
  36:	02 d0       	rcall	.+4      	; 0x3c <main>
  38:	18 c0       	rjmp	.+48     	; 0x6a <_exit>

0000003a <__bad_interrupt>:
  3a:	e2 cf       	rjmp	.-60     	; 0x0 <__vectors>

0000003c <main>:

int main (void)
{
	/* Insert application code here, after the board has been initialized. */
	
	DDRA = 0x00;						//Define DDRA como Entradas
  3c:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0xFF;						//Define DDRB como salidas
  3e:	8f ef       	ldi	r24, 0xFF	; 255
  40:	87 bb       	out	0x17, r24	; 23
	PORTA = 0XFF;						//PULL UP activado
  42:	8b bb       	out	0x1b, r24	; 27
	int result = 0x00;
	int value1 = 0x00;
	int value2 = 0x00;
	
	while(1){
		result = PINA;					//Lee el dato de PORTA
  44:	a9 e3       	ldi	r26, 0x39	; 57
  46:	b0 e0       	ldi	r27, 0x00	; 0
		value1 = (result & 0x0f);		//Aplica mascara 0x0F -> 00001111
		value2 = (result & 0xf0);		//Aplica mascara 0x0F -> 00001111
		value2 = value2  >> 4;			//Intercambia nibbles
		result = value2 - value1;		//Resta los valores
		PORTB = result;
  48:	e8 e3       	ldi	r30, 0x38	; 56
  4a:	f0 e0       	ldi	r31, 0x00	; 0
	int result = 0x00;
	int value1 = 0x00;
	int value2 = 0x00;
	
	while(1){
		result = PINA;					//Lee el dato de PORTA
  4c:	8c 91       	ld	r24, X
  4e:	90 e0       	ldi	r25, 0x00	; 0
		value1 = (result & 0x0f);		//Aplica mascara 0x0F -> 00001111
  50:	9c 01       	movw	r18, r24
  52:	2f 70       	andi	r18, 0x0F	; 15
  54:	30 70       	andi	r19, 0x00	; 0
		value2 = (result & 0xf0);		//Aplica mascara 0x0F -> 00001111
		value2 = value2  >> 4;			//Intercambia nibbles
		result = value2 - value1;		//Resta los valores
		PORTB = result;
  56:	92 95       	swap	r25
  58:	82 95       	swap	r24
  5a:	8f 70       	andi	r24, 0x0F	; 15
  5c:	89 27       	eor	r24, r25
  5e:	9f 70       	andi	r25, 0x0F	; 15
  60:	89 27       	eor	r24, r25
  62:	82 1b       	sub	r24, r18
  64:	93 0b       	sbc	r25, r19
  66:	80 83       	st	Z, r24
  68:	f1 cf       	rjmp	.-30     	; 0x4c <__SREG__+0xd>

0000006a <_exit>:
  6a:	f8 94       	cli

0000006c <__stop_program>:
  6c:	ff cf       	rjmp	.-2      	; 0x6c <__stop_program>
